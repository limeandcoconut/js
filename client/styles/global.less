@import './reset.less';

.clearfix:after {
    visibility: hidden;
    display: block;
    font-size: 0;
    content: " ";
    clear: both;
    height: 0;
}

.clearfix { display: inline-block; }
/* start commented backslash hack \*/
* html .clearfix { height: 1%; }
.clearfix { display: block; }
/* close commented backslash hack */

* {
    -webkit-font-smoothing: antialiased;
    -webkit-box-sizing: border-box;
    -khtml-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    box-sizing: border-box;
}

html, body {
    height: 100%;
    font-family: arial;
}


// @sizes: {
//   mobile: 320px;
//   tablet: 768px;
//   desktop: 1024px;
// }

.grid-breakpoints() {
    @xs: 0;
    @sm: 480px;
    @md: 768px;
    @lg: 1200px;
    @xl: 2200px;
};

@baseline: 6px;
@spacing: {
    no:      0;
    xxs:     1 * @baseline;
    xs:      2 * @baseline;
    sm:      3 * @baseline;
    md:      4 * @baseline;
    lg:      5 * @baseline;
    xl:      7 * @baseline;
    xxl:     10 * @baseline;
    xxxl:    11 * @baseline;
};

.min-font-sizes() {
    @card:            6;
    @cardTitle:       12;
    @cardSubtitle:    8;
    @xs:              10;
    @sm:              12.5;
    @md:              15;
    @venti:           22.5;
    @tetra:           36;
    @giga:            52.5;
};

.max-font-sizes() {
    @card:            30;
    @cardTitle:       60;
    @cardSubtitle:    40;
    @xs:              20;
    @sm:              25;
    @md:              30;
    @venti:           45;
    @tetra:           72;
    @giga:           105;
};


// Height
// Standard usage:
// height: .height(md)[];
// This is here to ensure that you are sticking to your normalization.
.height(@multiple) {
    @return: @baseline * @multiple;
}

// px
// Standard usage:
// font-size: .px(@min-fz)[];
// Converts the given scalar to px.
.px(@scalar) {
    @return: @scalar * 1px;
}

.above(@width; @rules) {

        // @width: @grid-breakpoints, @width);

        @media screen and (min-width: .grid-breakpoints[@@width]) {
            @rules();
        }
}

.below(@width; @rules) {

        // @width: @grid-breakpoints, @width);

        @media screen and (max-width: .grid-breakpoints[@@width] - 1px) {
            @rules();
        }
}

// fz (font-size)
// Standard usage:
// .fz(venti);
// Outputs styles which will gracefully scale between the minimum font-size at the minimum screen size and the maximum
// font-size at the maximum screen size. Outside screen size limits will default to the appropriate font-size extreme.
.fz(@key) {
    @min-fz: .min-font-sizes[@@key];
    @max-fz: .max-font-sizes[@@key];

    font-size: .px(@min-fz)[];

    .above(sm; {
        @diff: .grid-breakpoints[@xl] - .grid-breakpoints[@sm];
        @font-diff: @max-fz - @min-fz;
        @font-size: calc( ((100vw - .grid-breakpoints[@sm]) / unit(@diff)) * @font-diff + .px(@min-fz)[]);
        font-size: calc( ((100vw - .grid-breakpoints[@sm]) / unit(@diff)) * @font-diff + .px(@min-fz)[]);
        // background-color: #00ffcb
    });

    .above(xl; {
        font-size: .px(@max-fz)[];
        // background-color: magenta;
    });
}

.foo {
    background-color: magenta;
    // height: @spacing[xxxl];
    .fz(venti);

    // .mixin(md);
    height: .height(6)[];
    border-color: red;
}